@{
    ViewData["Title"] = "Home Page";
}
@using Entities.Concrete

<style>
    .category-select-container {
        position: fixed;
        top: 15%;
        left: 20px;
        background-color: #ffffff;
        border-radius: 10pc;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        width: 200px;
        z-index: 1000;
        margin-bottom: 20px;
    }

    select {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5pc;
        background-color: #f9f9f9;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

        select:focus {
            border-color: #4CAF50;
            outline: none;
            box-shadow: 0 0 5px rgba(76, 175, 80, 0.6);
        }
</style>

<div class="category-select-container">
    <select id="selectedCategory" onchange="changeCategory()">

        @if (ViewData["selectedId"] == null)
        {
        <option value="null" selected>Tümü</option>
        }
        else
        {
            <option value="null">Tümü</option>
        }

        @foreach (var item in (List<CategoryTableDto>)ViewData["categoryForSelect"])
        {
            if (ViewData["selectedId"] != null && item.Id == (Guid)ViewData["selectedId"])
            {
                <option selected value="@item.Id">@item.CategoryName</option>
            }
            else
            {
                <option value="@item.Id">@item.CategoryName</option>
            }

        }
    </select>
</div>


@foreach (var item in (List<ProductTableDto>)ViewData["products"])
{

    <div class="listContainerThere"
         style="border-bottom: 5px solid #9cfc02;border-left: 5px solid #1dffec;border-top: 5px solid #9cfc02;border-right: 5px solid #1dffec;">


        <h2 class="listContainerTitle"> @item.ProductName </h2>


        <div class="listContainerInThree">

            <div>

                <center>
                    <img src="~/@item.ImagePath" style="height: 150px;border-radius: 25px;margin-top: 10px;margin-bottom: 10px;" />
                </center>

                <p class="lisContainerP">Yemek Kategorisi : @item.Category.CategoryName</p>
                <p class="lisContainerP">Yemek Ücreti : @item.Price</p>

                <p class="lisContainerP">
                    @if (User.Identity.Name != null)
                    {

                        <button class="addPropertyButton" onclick="addPropertyProduct('@item.Id')">+</button>
                    }
                    Özellikler ;
                </p>
                @foreach (var property in item.Properties)
                {

                    <p class="lisContainerP">
                        @if (User.Identity.Name != null)
                        {
                            <button class="deletePropertyButton" onclick="deleteProductProperty('@property.Id')">-</button>
                        }
                        · Özellik: @property.Property.Key
                    </p>
                    <p class="lisContainerP">- Özellik : @property.Property.Value</p>

                }
                <div>

                    @if (User.Identity.Name != null)
                    {
                        <button class="deleteButton" onclick="deleteProduct('@item.Id')">
                            Delete
                        </button>

                        <button class="updateButton" onclick="updateProduct('@item.Id')">
                            Update
                        </button>
                    }
                </div>

            </div>
        </div>

    </div>
}

<script>

    async function deleteProduct(propertyId) {
        // Swal onay penceresini göster
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: 'Do you really want to delete this product?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel!'
        });

        // Kullanıcı onay verdiyse, yönlendirme işlemini gerçekleştir
        if (result.isConfirmed) {
            // Yönlendirme URL'sini oluştur
            const redirectUrl = `/Product/DeleteProduct?id=${propertyId}`;

            // Kullanıcıyı yönlendir
            window.location.href = redirectUrl;
        }
    }

    async function updateProduct(propertyId) {
        const redirectUrl = `/Product/UpdateProduct?id=${propertyId}`;

        // Kullanıcıyı yönlendir
        window.location.href = redirectUrl;
    }

    async function addPropertyProduct(propertyId) {
        const redirectUrl = `/Product/AddProperty?id=${propertyId}`;

        // Kullanıcıyı yönlendir
        window.location.href = redirectUrl;
    }


    async function deleteProductProperty(propertyId) {
        // Swal onay penceresini göster
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: 'Do you really want to delete this product property ?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel!'
        });

        // Kullanıcı onay verdiyse, yönlendirme işlemini gerçekleştir
        if (result.isConfirmed) {
            // Yönlendirme URL'sini oluştur
            const redirectUrl = `/Product/DeleteProperty?id=${propertyId}`;

            // Kullanıcıyı yönlendir
            window.location.href = redirectUrl;
        }
    }

    async function changeCategory() {

        const categoryId = document.getElementById("selectedCategory").value;

        const redirectUrl = `/Home/Index?id=${categoryId}`;

        window.location.href = redirectUrl;
    }
</script>